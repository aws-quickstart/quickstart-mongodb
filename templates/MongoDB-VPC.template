{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "(000F) Deploy MongoDB on a New VPC in AWS",
    "Parameters": {
        "VPCCIDR": {
            "Description": "CIDR Block for the VPC you are creating.",
            "Type": "String",
            "Default": "10.0.0.0/16",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "RemoteAccessCIDR": {
            "Description": "IP CIDR from where you could SSH into MongoDB cluster via NAT Note: a value of 0.0.0.0/0 will allow access from ANY ip address",
            "Type": "String",
            "MinLength": "9",
            "MaxLength": "18",
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x."
        },
        "ClusterReplicaSetCount": {
            "Description": "Number of Replica Set Members. Choose 1 or 3",
            "Type": "String",
            "Default": "1",
            "AllowedValues": [
                "1",
                "3"
            ]
        },
        "ClusterShardCount": {
            "Description": "Number of Shards [0,1,2,3]. 0==No Sharding. Set to > 1 for Sharding",
            "Type": "String",
            "Default": "0",
            "AllowedValues": [
                "0",
                "1",
                "2",
                "3"
            ]
        },
        "MongoDBVersion": {
            "Description": "MongoDB version",
            "Type": "String",
            "Default": "3.2",
            "AllowedValues": [
                "3.2",
                "3.0",
                "2.6"
            ]
        },
        "ShardsPerNode": {
            "Description": "Number of Micro Shards Per Node",
            "Type": "String",
            "Default": "0",
            "AllowedValues": [
                "0",
                "1",
                "2",
                "3",
                "4",
                "5",
                "6",
                "7",
                "8",
                "9",
                "10",
                "11",
                "12",
                "13",
                "14",
                "15",
                "16"
            ]
        },
        "BuildBucket": {
            "Description": "Main Bucket where the templates/scripts are installed. Do not change.",
            "Type": "String",
            "Default": "quickstart-reference/mongodb/latest"
        },
        "PublicSubnet": {
            "Description": "CIDR Block for the Public DMZ Subnet located in the new VPC.",
            "Type": "String",
            "Default": "10.0.1.0/24",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "PrimaryReplicaSubnet": {
            "Description": "Private Subnet where Primary Replica Set will be deployed.",
            "Type": "String",
            "Default": "10.0.2.0/24",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "SecondaryReplicaSubnet0": {
            "Description": "Private Subnet of Secondary Replica Set 0 (Applicable only when ClusterReplicaSetCount >= 2) ",
            "Type": "String",
            "Default": "10.0.3.0/24",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "SecondaryReplicaSubnet1": {
            "Description": "Private Subnet of Secondary Replica Set 1 (Applicable only when ClusterReplicaSetCount == 3) ",
            "Type": "String",
            "Default": "10.0.4.0/24",
            "AllowedPattern": "[a-zA-Z0-9]+\\..+"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "home",
            "Description": "Name of an existing EC2 KeyPair. MondoDB instances will launch with this KeyPair."
        },
        "NATInstanceType": {
            "Description": "Amazon EC2 instance type for the NAT Instances.",
            "Type": "String",
            "Default": "t2.small",
            "AllowedValues": [
                "t2.small",
                "t2.medium"
            ]
        },
        "VolumeSize": {
            "Type": "String",
            "Description": "EBS Volume Size (data) to be attached to node in GBs",
            "Default": "400"
        },
        "VolumeType": {
            "Type": "String",
            "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]",
            "Default": "gp2",
            "AllowedValues": [
                "gp2",
                "io1"
            ]
        },
        "Iops": {
            "Type": "String",
            "Description": "Iops of EBS volume when io1 type is chosen. Otherwise ignored",
            "Default": "100"
        },
        "ConfigServerInstanceType": {
            "Description": "Amazon EC2 instance type for the Config Server",
            "Type": "String",
            "Default": "t2.micro",
            "AllowedValues": [
                "t2.micro",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ]
        },
        "NodeInstanceType": {
            "Description": "Amazon EC2 instance type for the MongoDB nodes.",
            "Type": "String",
            "Default": "m4.large",
            "AllowedValues": [
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "m4.xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge"
            ]
        },
        "AvailabilityZone0": {
            "Description": "Pick an AvailabilityZone for Subnet creation (PrimaryNode)",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "AvailabilityZone1": {
            "Description": "Pick an AvailabilityZone for Subnet creation (SecondaryNode0)",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        },
        "AvailabilityZone2": {
            "Description": "Pick an AvailabilityZone for Subnet creation (SecondaryNode1)",
            "Type": "AWS::EC2::AvailabilityZone::Name"
        }
    },
    "Conditions": {
        "UsePIops": {
            "Fn::Equals": [
                {
                    "Ref": "VolumeType"
                },
                "io1"
            ]
        },
        "UseGP2": {
            "Fn::Equals": [
                {
                    "Ref": "VolumeType"
                },
                "gp2"
            ]
        },
        "CreateSingleReplicaSet": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterReplicaSetCount"
                },
                "1"
            ]
        },
        "CreateThreeReplicaSet": {
            "Fn::Or" : [
              {"Fn::Equals": [{ "Ref": "ClusterReplicaSetCount"}, "3"]},
              {"Fn::Equals": [{ "Ref": "ClusterShardCount"}, "1"]},
              {"Fn::Equals": [{ "Ref": "ClusterShardCount"}, "2"]},
              {"Fn::Equals": [{ "Ref": "ClusterShardCount"}, "3"]}
           ]
        },
        "CreateNoShard": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterShardCount"
                },
                "0"
            ]
        },
        "CreateConfigServers": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterShardCount"
                        },
                        "0"
                    ]
                }
            ]
        },
        "CreateMinOneShard": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterShardCount"
                        },
                        "0"
                    ]
                }
            ]
        },
        "CreateMinTwoShards": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        "2",
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                },
                {
                    "Fn::Equals": [
                        "3",
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                }
            ]
        },
        "CreateMinThreeShards": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        "3",
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                },
                {
                    "Fn::Equals": [
                        "3",
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                }
            ]
        },
        "UsePIopsAndCreateNoShard": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "CreateNoShard"
                }
            ]
        },
        "UsePIopsAndCreateMinOneShard": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "CreateMinOneShard"
                }
            ]
        },
        "UsePIopsAndCreateMinTwoShards": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "CreateMinTwoShards"
                }
            ]
        },
        "UsePIopsAndCreateMinThreeShards": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "CreateMinThreeShards"
                }
            ]
        },
        "UseGP2AndCreateMinThreeShards": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "CreateMinThreeShards"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode0": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode0"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode1": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode1"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode00": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode00"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode10": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode10"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode11": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode11"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode01": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode01"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode21": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode21"
                }
            ]
        },
        "UsePIopsAndIfSecondaryReplicaNode20": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                },
                {
                    "Condition": "IfSecondaryReplicaNode20"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode10": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode10"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode11": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode11"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode20": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode20"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode21": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode21"
                }
            ]
        },
        "UseGP2AndCreateNoShard": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "CreateNoShard"
                }
            ]
        },
        "UseGP2AndCreateMinOneShard": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "CreateMinOneShard"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode0": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode0"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode1": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode1"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode00": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode00"
                }
            ]
        },
        "UseGP2AndIfSecondaryReplicaNode01": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "IfSecondaryReplicaNode01"
                }
            ]
        },
        "UseGP2AndCreateMinTwoShards": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                },
                {
                    "Condition": "CreateMinTwoShards"
                }
            ]
        },
        "IfSecondaryReplicaNode00": {
            "Fn::And": [
                {
                    "Condition": "CreateMinOneShard"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode0": {
            "Fn::And": [
                {
                    "Condition": "CreateNoShard"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode1": {
            "Fn::And": [
                {
                    "Condition": "CreateNoShard"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode01": {
            "Fn::And": [
                {
                    "Condition": "CreateMinOneShard"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode10": {
            "Fn::And": [
                {
                    "Condition": "CreateMinTwoShards"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode11": {
            "Fn::And": [
                {
                    "Condition": "CreateMinTwoShards"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode20": {
            "Fn::And": [
                {
                    "Condition": "CreateMinThreeShards"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        },
        "IfSecondaryReplicaNode21": {
            "Fn::And": [
                {
                    "Condition": "CreateMinThreeShards"
                },
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUX": "amzn-ami-hvm-2017.03.0.20170417-x86_64-gp2",
                "AWSNAT": "amzn-ami-vpc-nat-hvm-2017.03.0.20170417-x86_64-ebs"
            },
            "ap-northeast-1": {
                "AMZNLINUX": "ami-923d12f5",
                "AWSNAT": "ami-6c3c130b"
            },
            "ap-northeast-2": {
                "AMZNLINUX": "ami-9d15c7f3",
                "AWSNAT": "ami-2e15c740"
            },
            "ap-south-1": {
                "AMZNLINUX": "ami-52c7b43d",
                "AWSNAT": "ami-85c1b2ea"
            },
            "ap-southeast-1": {
                "AMZNLINUX": "ami-fc5ae39f",
                "AWSNAT": "ami-ae5ce5cd"
            },
            "ap-southeast-2": {
                "AMZNLINUX": "ami-162c2575",
                "AWSNAT": "ami-242f2647"
            },
            "eu-central-1": {
                "AMZNLINUX": "ami-b968bad6",
                "AWSNAT": "ami-0469bb6b"
            },
            "eu-west-1": {
                "AMZNLINUX": "ami-01ccc867",
                "AWSNAT": "ami-5bc6c23d"
            },
            "sa-east-1": {
                "AMZNLINUX": "ami-37cfad5b",
                "AWSNAT": "ami-93ccaeff"
            },
            "us-east-1": {
                "AMZNLINUX": "ami-c58c1dd3",
                "AWSNAT": "ami-258e1f33"
            },
            "us-west-1": {
                "AMZNLINUX": "ami-7a85a01a",
                "AWSNAT": "ami-eeba9f8e"
            },
            "us-west-2": {
                "AMZNLINUX": "ami-4836a428",
                "AWSNAT": "ami-8437a5e4"
            }
        }
    },
    "Resources": {
        "VPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                },
                "EnableDnsHostnames": "true",
                "EnableDnsSupport": "true",
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB on AWS"
                    }
                ]
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        },
        "AttachGateway": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "DMZSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PublicSubnet"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    },
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone0"
                }
            }
        },
        "NATInstance": {
            "Type": "AWS::EC2::Instance",
            "Properties": {
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "NAT Instance (Public Subnet)"
                    }
                ],
                "InstanceType": {
                    "Ref": "NATInstanceType"
                },
                "KeyName": {
                    "Ref": "KeyName"
                },
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AWSNAT"
                    ]
                }
            }
        },
        "NATEIP": {
            "Type": "AWS::EC2::EIP",
            "Properties": {
                "Domain": "vpc"
            }
        },
        "NATInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZSubnet"
                },
                "Description": "External interface for the NAT instance",
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ],
                "SourceDestCheck": "false",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "AssociateInterfaceNAT": {
            "Type": "AWS::EC2::EIPAssociation",
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP",
                        "AllocationId"
                    ]
                },
                "NetworkInterfaceId": {
                    "Ref": "NATInterface"
                }
            }
        },
        "NATSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }, 
                        "FromPort": "8", 
                        "IpProtocol": "icmp", 
                        "ToPort": "-1"
                    }, 
                    {
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }, 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "DMZRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "NAT"
                    }
                ]
            }
        },
        "PublicRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            }
        },
        "PublicSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "DMZSubnet"
                },
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                }
            }
        },
        "InboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "OutBoundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "100",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            }
        },
        "PrimaryNodeSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "PrimaryReplicaSubnet"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone0"
                }
            },
            "DependsOn": "VPC"
        },
        "PrimaryNodeRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB"
                    }
                ]
            },
            "DependsOn": "VPC"
        },
        "PrimaryNodeRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrimaryNodeRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance"
                }
            },
            "DependsOn": "VPC"
        },
        "PrimaryPublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            },
            "DependsOn": "VPC"
        },
        "PrimaryNodeSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                },
                "RouteTableId": {
                    "Ref": "PrimaryNodeRouteTable"
                }
            },
            "DependsOn": "VPC"
        },
        "PrimaryInboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "89",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            },
            "DependsOn": "VPC"
        },
        "PrimaryOutBoundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "88",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            },
            "DependsOn": "VPC"
        },
        "Secondary0NodeSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "SecondaryReplicaSubnet0"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary0NodeRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB"
                    }
                ]
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary0NodeRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Secondary0NodeRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary0PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary0NodeSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                },
                "RouteTableId": {
                    "Ref": "Secondary0NodeRouteTable"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary0InboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "91",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary0OutBoundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "90",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1NodeSubnet": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "CidrBlock": {
                    "Ref": "SecondaryReplicaSubnet1"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB"
                    },
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ],
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone2"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1NodeRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Application",
                        "Value": "MongoDB"
                    }
                ]
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1NodeRoute": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "Secondary1NodeRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "InstanceId": {
                    "Ref": "NATInstance"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1PublicNetworkAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "VPC"
                },
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Public"
                    }
                ]
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1NodeSubnetRouteTableAssociation": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                },
                "RouteTableId": {
                    "Ref": "Secondary1NodeRouteTable"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1InboundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "93",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "false",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "Secondary1OutBoundPublicNetworkAclEntry": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                },
                "RuleNumber": "92",
                "Protocol": "6",
                "RuleAction": "allow",
                "Egress": "true",
                "CidrBlock": "0.0.0.0/0",
                "PortRange": {
                    "From": "0",
                    "To": "65535"
                }
            },
            "Condition": "CreateThreeReplicaSet",
            "DependsOn": "VPC"
        },
        "PrimaryReplicaNode0NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode0NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateNoShard",
            "DependsOn": "PrimaryNodeSubnet"
        },
        "PrimaryReplicaNode0NodeSecurityGroup": {
            "Condition": "CreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "PrimaryReplicaNode0NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateNoShard",
            "DependsOn": "PrimaryNodeSubnet"
        },
        "PrimaryReplicaNode0NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode0NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateNoShard",
            "DependsOn": "PrimaryNodeSubnet"
        },
        "PrimaryReplicaNode0WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryNodeSubnet",
            "Condition": "UsePIopsAndCreateNoShard",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode0WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryNodeSubnet",
            "Condition": "UseGP2AndCreateNoShard",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode0WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateNoShard",
            "DependsOn": "PrimaryNodeSubnet"
        },
        "PrimaryReplicaNode0NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndCreateNoShard",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode0NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode0NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode0"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "-1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            },
            "DependsOn": "PrimaryNodeSubnet"
        },
        "PrimaryReplicaNode0NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndCreateNoShard",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode0NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode0NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode0"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "-1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            },
            "DependsOn": "PrimaryNodeSubnet"
        },
        "PrimaryReplicaNode00NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode00NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "PrimaryReplicaNode00NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "PrimaryReplicaNode00NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "PrimaryReplicaNode00NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode00NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "PrimaryReplicaNode00WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode00NodeInstanceIO1",
            "Condition": "UsePIopsAndCreateMinOneShard",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode00WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode00NodeInstanceGP2",
            "Condition": "UseGP2AndCreateMinOneShard",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode00WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateMinOneShard"
        },
        "PrimaryReplicaNode00NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndCreateMinOneShard",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode00NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode00NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode00"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "PrimaryReplicaNode00NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndCreateMinOneShard",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode00NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode00NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode00"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode0NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode0NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode0"
        },
        "SecondaryReplicaNode0NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode0", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode0NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode0"
        },
        "SecondaryReplicaNode0NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode0NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode0"
        },
        "SecondaryReplicaNode0WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode0NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode0",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode0WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode0NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode0",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode0WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode0"
        },
        "SecondaryReplicaNode0NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode0",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode0NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode0NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode0"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "-1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode0NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode0",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode0NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode0NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode0"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "-1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode00NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode00NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode00"
        },
        "SecondaryReplicaNode00NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode00", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode00NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode00"
        },
        "SecondaryReplicaNode00NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode00NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode00"
        },
        "SecondaryReplicaNode00WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode00NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode00",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode00WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode00NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode00",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode00WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode00"
        },
        "SecondaryReplicaNode00NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode00",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode00NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode00NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode00"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode00NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode00",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode00NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode00NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode00"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode1NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode1NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode1"
        },
        "SecondaryReplicaNode1NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode1", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode1NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode1"
        },
        "SecondaryReplicaNode1NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode1NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode1"
        },
        "SecondaryReplicaNode1WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode1NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode1",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode1WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode1NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode1",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode1WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode1"
        },
        "SecondaryReplicaNode1NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode1",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode1NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode1NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode1"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "-1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode1NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode1",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode1NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode1NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode1"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "-1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode01NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode01NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode01"
        },
        "SecondaryReplicaNode01NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode01", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SecondaryReplicaNode01NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode01"
        },
        "SecondaryReplicaNode01NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode01NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode01"
        },
        "SecondaryReplicaNode01WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode01NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode01",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode01WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode01NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode01",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode01WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode01"
        },
        "SecondaryReplicaNode01NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode01",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode01NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode01NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode01"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode01NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode01",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode01NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode01NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode01"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "PrimaryReplicaNode10NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode10NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateMinTwoShards"
        },
        "PrimaryReplicaNode10NodeSecurityGroup": {
            "Condition": "CreateMinTwoShards", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "PrimaryReplicaNode10NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateMinTwoShards"
        },
        "PrimaryReplicaNode10NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode10NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateMinTwoShards"
        },
        "PrimaryReplicaNode10WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode10NodeInstanceIO1",
            "Condition": "UsePIopsAndCreateMinTwoShards",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode10WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode10NodeInstanceGP2",
            "Condition": "UseGP2AndCreateMinTwoShards",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode10WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateMinTwoShards"
        },
        "PrimaryReplicaNode10NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndCreateMinTwoShards",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode10NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode10NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode10"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "PrimaryReplicaNode10NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndCreateMinTwoShards",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode10NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode10NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode10"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode10NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode10NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode10"
        },
        "SecondaryReplicaNode10NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode10", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SecondaryReplicaNode10NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode10"
        },
        "SecondaryReplicaNode10NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode10NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode10"
        },
        "SecondaryReplicaNode10WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode10NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode10",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode10WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode10NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode10",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode10WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode10"
        },
        "SecondaryReplicaNode10NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode10",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode10NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode10NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode10"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode10NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode10",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode10NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode10NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode10"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode11NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode11NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode11"
        },
        "SecondaryReplicaNode11NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode11", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SecondaryReplicaNode11NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode11"
        },
        "SecondaryReplicaNode11NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode11NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode11"
        },
        "SecondaryReplicaNode11WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode11NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode11",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode11WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode11NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode11",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode11WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode11"
        },
        "SecondaryReplicaNode11NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode11",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode11NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode11NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode11"
                    },

                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode11NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode11",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode11NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode11NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode11"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "PrimaryReplicaNode20NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode20NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateMinThreeShards"
        },
        "PrimaryReplicaNode20NodeSecurityGroup": {
            "Condition": "CreateMinThreeShards", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "PrimaryReplicaNode20NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateMinThreeShards"
        },
        "PrimaryReplicaNode20NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode20NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateMinThreeShards"
        },
        "PrimaryReplicaNode20WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode20NodeInstanceIO1",
            "Condition": "UsePIopsAndCreateMinThreeShards",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode20WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "PrimaryReplicaNode20NodeInstanceGP2",
            "Condition": "UseGP2AndCreateMinThreeShards",
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "PrimaryReplicaNode20WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateMinThreeShards"
        },
        "PrimaryReplicaNode20NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndCreateMinThreeShards",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode20NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode20NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode20"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "PrimaryReplicaNode20NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndCreateMinThreeShards",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode20NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode20NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "PrimaryReplicaNode20"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Primary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "0"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode20NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode20NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode20"
        },
        "SecondaryReplicaNode20NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode20", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SecondaryReplicaNode20NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode20"
        },
        "SecondaryReplicaNode20NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode20NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode20"
        },
        "SecondaryReplicaNode20WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode20NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode20",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode20WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode20NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode20",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode20WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode20"
        },
        "SecondaryReplicaNode20NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode20",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode20NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode20NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode20"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode20NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode20",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode20NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode20NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode20"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "1"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode21NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode21NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode21"
        },
        "SecondaryReplicaNode21NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode21", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "SecondaryReplicaNode21NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode21"
        },
        "SecondaryReplicaNode21NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode21NodeIAMRole"
                    }
                ]
            },
            "Condition": "IfSecondaryReplicaNode21"
        },
        "SecondaryReplicaNode21WaitForNodeInstallIO1": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode21NodeInstanceIO1",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode21",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode21WaitForNodeInstallGP2": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "SecondaryReplicaNode21NodeInstanceGP2",
            "Condition": "UseGP2AndIfSecondaryReplicaNode21",
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            }
        },
        "SecondaryReplicaNode21WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "IfSecondaryReplicaNode21"
        },
        "SecondaryReplicaNode21NodeInstanceGP2": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UseGP2AndIfSecondaryReplicaNode21",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode21NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode21NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode21"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "SecondaryReplicaNode21NodeInstanceIO1": {
            "Type": "AWS::EC2::Instance",
            "Condition": "UsePIopsAndIfSecondaryReplicaNode21",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode21NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode21NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "SecondaryReplicaNode21"
                    },
                    {
                        "Key": "NodeType",
                        "Value": "Secondary"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": "2"
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ShardsPerNode",
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    },
                    {
                        "Key": "NodeShardIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "250"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "25",
                            "Iops": "200"
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": "io1",
                            "Iops": {
                                "Ref": "Iops"
                            },
                            "DeleteOnTermination": "true"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "# All is well so signal success\n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "ConfigServer0NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "ConfigServer0NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer0NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "ConfigServer0NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer0NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ConfigServer0NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer0WaitForNodeInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ConfigServer0NodeInstance",
            "Properties": {
                "Handle": {
                    "Ref": "ConfigServer0WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer0WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer0NodeInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "ConfigServer0NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ConfigServer0NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ConfigServer0"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ConfigServerIndex",
                        "Value": "0"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "40"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "# All is well so signal success\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '",
                                {
                                    "Ref": "ConfigServer0WaitForNodeInstallWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "ConfigServerInstanceType"
                }
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer1NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "ConfigServer1NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer1NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        },
        "ConfigServer1NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer1NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ConfigServer1NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer1WaitForNodeInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ConfigServer1NodeInstance",
            "Properties": {
                "Handle": {
                    "Ref": "ConfigServer1WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer1WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer1NodeInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "ConfigServer1NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ConfigServer1NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ConfigServer1"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ConfigServerIndex",
                        "Value": "1"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "40"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "# All is well so signal success\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '",
                                {
                                    "Ref": "ConfigServer1WaitForNodeInstallWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "ConfigServerInstanceType"
                }
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer2NodeInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "ConfigServer2NodeSecurityGroup"
                    }
                ],
                "SourceDestCheck": "true",
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer2NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "ConfigServer2NodeIAMRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "Backup",
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "s3:*",
                                        "ec2:Describe*",
                                        "ec2:AttachNetworkInterface",
                                        "ec2:AttachVolume",
                                        "ec2:CreateTags",
                                        "ec2:CreateVolume",
                                        "ec2:RunInstances",
                                        "ec2:StartInstances",
                                        "ec2:DeleteVolume",
                                        "ec2:CreateSecurityGroup",
                                        "ec2:CreateSnapshot"
                                    ],
                                    "Resource": "*"
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "dynamodb:*",
                                        "dynamodb:Scan",
                                        "dynamodb:Query",
                                        "dynamodb:GetItem",
                                        "dynamodb:BatchGetItem",
                                        "dynamodb:UpdateTable"
                                    ],
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer2NodeIAMProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "ConfigServer2NodeIAMRole"
                    }
                ]
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer2WaitForNodeInstall": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "DependsOn": "ConfigServer2NodeInstance",
            "Properties": {
                "Handle": {
                    "Ref": "ConfigServer2WaitForNodeInstallWaitHandle"
                },
                "Timeout": "3600"
            },
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer2WaitForNodeInstallWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Properties": {},
            "Condition": "CreateMinOneShard"
        },
        "ConfigServer2NodeInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "HostRole": "MongoDB Node"
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "ConfigServer2NodeInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        "AMZNLINUX"
                    ]
                },
                "IamInstanceProfile": {
                    "Ref": "ConfigServer2NodeIAMProfile"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "ConfigServer2"
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "ClusterShardCount",
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    },
                    {
                        "Key": "ConfigServerIndex",
                        "Value": "2"
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "DeleteOnTermination": "true",
                            "VolumeSize": "40"
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -v\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "# Wait until the NAT initializes and Internet is available \n",
                                "until ping -c 1 ietf.org \n",
                                "do \n",
                                "sleep 5; \n",
                                "done \n",
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/orchestrator.sh orchestrator.sh\n",
                                "chmod +x orchestrator.sh \n",
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Ref": "BuildBucket"
                                },
                                "/scripts/init.sh init.sh\n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "# All is well so signal success\n",
                                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '",
                                {
                                    "Ref": "ConfigServer2WaitForNodeInstallWaitHandle"
                                },
                                "'\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "ConfigServerInstanceType"
                }
            },
            "Condition": "CreateMinOneShard"
        }
    }
}