{
    "AWSTemplateFormatVersion": "2010-09-09", 
    "Conditions": {
        "CreateConfigServers": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterShardCount"
                        }, 
                        "0"
                    ]
                }
            ]
        }, 
        "CreateMinOneShard": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "ClusterShardCount"
                        }, 
                        "0"
                    ]
                }
            ]
        }, 
        "CreateMinThreeShards": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        "3", 
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                }, 
                {
                    "Fn::Equals": [
                        "3", 
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                }
            ]
        }, 
        "CreateMinTwoShards": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        "2", 
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                }, 
                {
                    "Fn::Equals": [
                        "3", 
                        {
                            "Ref": "ClusterShardCount"
                        }
                    ]
                }
            ]
        }, 
        "CreateNoShard": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterShardCount"
                }, 
                "0"
            ]
        }, 
        "CreateSingleReplicaSet": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterReplicaSetCount"
                }, 
                "1"
            ]
        }, 
        "CreateThreeReplicaSet": {
            "Fn::Equals": [
                {
                    "Ref": "ClusterReplicaSetCount"
                }, 
                "3"
            ]
        }, 
        "IfSecondaryReplicaNode0": {
            "Fn::And": [
                {
                    "Condition": "CreateNoShard"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode00": {
            "Fn::And": [
                {
                    "Condition": "CreateMinOneShard"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode01": {
            "Fn::And": [
                {
                    "Condition": "CreateMinOneShard"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode1": {
            "Fn::And": [
                {
                    "Condition": "CreateNoShard"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode10": {
            "Fn::And": [
                {
                    "Condition": "CreateMinTwoShards"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode11": {
            "Fn::And": [
                {
                    "Condition": "CreateMinTwoShards"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode20": {
            "Fn::And": [
                {
                    "Condition": "CreateMinThreeShards"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "IfSecondaryReplicaNode21": {
            "Fn::And": [
                {
                    "Condition": "CreateMinThreeShards"
                }, 
                {
                    "Condition": "CreateThreeReplicaSet"
                }
            ]
        }, 
        "UseGP2": {
            "Fn::Equals": [
                {
                    "Ref": "VolumeType"
                }, 
                "gp2"
            ]
        }, 
        "UseGP2AndCreateMinOneShard": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "CreateMinOneShard"
                }
            ]
        }, 
        "UseGP2AndCreateMinThreeShards": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "CreateMinThreeShards"
                }
            ]
        }, 
        "UseGP2AndCreateMinTwoShards": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "CreateMinTwoShards"
                }
            ]
        }, 
        "UseGP2AndCreateNoShard": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "CreateNoShard"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode0": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode0"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode00": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode00"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode01": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode01"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode1": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode1"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode10": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode10"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode11": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode11"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode20": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode20"
                }
            ]
        }, 
        "UseGP2AndIfSecondaryReplicaNode21": {
            "Fn::And": [
                {
                    "Condition": "UseGP2"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode21"
                }
            ]
        }, 
        "UsePIops": {
            "Fn::Equals": [
                {
                    "Ref": "VolumeType"
                }, 
                "io1"
            ]
        }, 
        "UsePIopsAndCreateMinOneShard": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "CreateMinOneShard"
                }
            ]
        }, 
        "UsePIopsAndCreateMinThreeShards": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "CreateMinThreeShards"
                }
            ]
        }, 
        "UsePIopsAndCreateMinTwoShards": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "CreateMinTwoShards"
                }
            ]
        }, 
        "UsePIopsAndCreateNoShard": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "CreateNoShard"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode0": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode0"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode00": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode00"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode01": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode01"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode1": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode1"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode10": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode10"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode11": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode11"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode20": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode20"
                }
            ]
        }, 
        "UsePIopsAndIfSecondaryReplicaNode21": {
            "Fn::And": [
                {
                    "Condition": "UsePIops"
                }, 
                {
                    "Condition": "IfSecondaryReplicaNode21"
                }
            ]
        }
    }, 
    "Description": "(000F) Deploy MongoDB on a New VPC in AWS", 
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "AMZNLINUX": "amzn-ami-hvm-2016.09.1.20170119-x86_64-gp2", 
                "AWSNAT": "amzn-ami-vpc-nat-hvm-2016.09.1.20170119-x86_64-ebs"
            }, 
            "ap-northeast-1": {
                "AMZNLINUX": "ami-56d4ad31", 
                "AWSNAT": "ami-78d6af1f"
            }, 
            "ap-northeast-2": {
                "AMZNLINUX": "ami-dac312b4", 
                "AWSNAT": "ami-7ec31210"
            }, 
            "ap-south-1": {
                "AMZNLINUX": "ami-f9daac96", 
                "AWSNAT": "ami-48dcaa27"
            }, 
            "ap-southeast-1": {
                "AMZNLINUX": "ami-dc9339bf", 
                "AWSNAT": "ami-a0903ac3"
            }, 
            "ap-southeast-2": {
                "AMZNLINUX": "ami-1c47407f", 
                "AWSNAT": "ami-1e47407d"
            }, 
            "eu-central-1": {
                "AMZNLINUX": "ami-af0fc0c0", 
                "AWSNAT": "ami-7d0ec112"
            }, 
            "eu-west-1": {
                "AMZNLINUX": "ami-70edb016", 
                "AWSNAT": "ami-47ecb121"
            }, 
            "sa-east-1": {
                "AMZNLINUX": "ami-80086dec", 
                "AWSNAT": "ami-f80b6e94"
            }, 
            "us-east-1": {
                "AMZNLINUX": "ami-0b33d91d", 
                "AWSNAT": "ami-dd3dd7cb"
            }, 
            "us-west-1": {
                "AMZNLINUX": "ami-165a0876", 
                "AWSNAT": "ami-7d54061d"
            }, 
            "us-west-2": {
                "AMZNLINUX": "ami-f173cc91", 
                "AWSNAT": "ami-3b6fd05b"
            }
        }
    }, 
    "Parameters": {
        "AvailabilityZone0": {
            "Description": "Pick an AvailabilityZone for Subnet creation (PrimaryNode)", 
            "Type": "AWS::EC2::AvailabilityZone::Name"
        }, 
        "AvailabilityZone1": {
            "Description": "Pick an AvailabilityZone for Subnet creation (SecondaryNode0)", 
            "Type": "AWS::EC2::AvailabilityZone::Name"
        }, 
        "AvailabilityZone2": {
            "Description": "Pick an AvailabilityZone for Subnet creation (SecondaryNode1)", 
            "Type": "AWS::EC2::AvailabilityZone::Name"
        }, 
        "BuildBucket": {
            "Default": "quickstart-reference/mongodb/latest", 
            "Description": "Main Bucket where the templates/scripts are installed. Do not change.", 
            "Type": "String"
        }, 
        "ClusterReplicaSetCount": {
            "AllowedValues": [
                "1", 
                "3"
            ], 
            "Default": "1", 
            "Description": "Number of Replica Set Members. Choose 1 or 3", 
            "Type": "String"
        }, 
        "ClusterShardCount": {
            "AllowedValues": [
                "0", 
                "1", 
                "2", 
                "3"
            ], 
            "Default": "0", 
            "Description": "Number of Shards [0,1,2,3]. 0==No Sharding. Set to > 1 for Sharding", 
            "Type": "String"
        }, 
        "ConfigServerInstanceType": {
            "AllowedValues": [
                "t2.micro", 
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "m4.large", 
                "m4.2xlarge", 
                "m4.4xlarge", 
                "m4.10xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "r3.large", 
                "r3.xlarge", 
                "r3.2xlarge", 
                "r3.4xlarge", 
                "r3.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "i2.8xlarge"
            ], 
            "Default": "t2.micro", 
            "Description": "Amazon EC2 instance type for the Config Server", 
            "Type": "String"
        }, 
        "Iops": {
            "Default": "100", 
            "Description": "Iops of EBS volume when io1 type is chosen. Otherwise ignored", 
            "Type": "String"
        }, 
        "KeyName": {
            "Default": "home", 
            "Description": "Name of an existing EC2 KeyPair. MondoDB instances will launch with this KeyPair.", 
            "Type": "AWS::EC2::KeyPair::KeyName"
        }, 
        "MongoDBVersion": {
            "AllowedValues": [
                "3.2", 
                "3.0", 
                "2.6"
            ], 
            "Default": "3.2", 
            "Description": "MongoDB version", 
            "Type": "String"
        }, 
        "NATInstanceType": {
            "AllowedValues": [
                "t2.small", 
                "t2.medium"
            ], 
            "Default": "t2.small", 
            "Description": "Amazon EC2 instance type for the NAT Instances.", 
            "Type": "String"
        }, 
        "NodeInstanceType": {
            "AllowedValues": [
                "m3.medium", 
                "m3.large", 
                "m3.xlarge", 
                "m3.2xlarge", 
                "m4.large", 
                "m4.2xlarge", 
                "m4.4xlarge", 
                "m4.10xlarge", 
                "m4.xlarge", 
                "c3.large", 
                "c3.xlarge", 
                "c3.2xlarge", 
                "c3.4xlarge", 
                "c3.8xlarge", 
                "r3.large", 
                "r3.xlarge", 
                "r3.2xlarge", 
                "r3.4xlarge", 
                "r3.8xlarge", 
                "i2.xlarge", 
                "i2.2xlarge", 
                "i2.4xlarge", 
                "i2.8xlarge"
            ], 
            "Default": "m4.large", 
            "Description": "Amazon EC2 instance type for the MongoDB nodes.", 
            "Type": "String"
        }, 
        "PrimaryReplicaSubnet": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+", 
            "Default": "10.0.2.0/24", 
            "Description": "Private Subnet where Primary Replica Set will be deployed.", 
            "Type": "String"
        }, 
        "PublicSubnet": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+", 
            "Default": "10.0.1.0/24", 
            "Description": "CIDR Block for the Public DMZ Subnet located in the new VPC.", 
            "Type": "String"
        }, 
        "RemoteAccessCIDR": {
            "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})", 
            "ConstraintDescription": "must be a valid CIDR range of the form x.x.x.x/x.", 
            "Description": "IP CIDR from where you could SSH into MongoDB cluster via NAT Note: a value of 0.0.0.0/0 will allow access from ANY ip address", 
            "MaxLength": "18", 
            "MinLength": "9", 
            "Type": "String"
        }, 
        "SecondaryReplicaSubnet0": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+", 
            "Default": "10.0.3.0/24", 
            "Description": "Private Subnet of Secondary Replica Set 0 (Applicable only when ClusterReplicaSetCount >= 2) ", 
            "Type": "String"
        }, 
        "SecondaryReplicaSubnet1": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+", 
            "Default": "10.0.4.0/24", 
            "Description": "Private Subnet of Secondary Replica Set 1 (Applicable only when ClusterReplicaSetCount == 3) ", 
            "Type": "String"
        }, 
        "ShardsPerNode": {
            "AllowedValues": [
                "0", 
                "1", 
                "2", 
                "3", 
                "4", 
                "5", 
                "6", 
                "7", 
                "8", 
                "9", 
                "10", 
                "11", 
                "12", 
                "13", 
                "14", 
                "15", 
                "16"
            ], 
            "Default": "0", 
            "Description": "Number of Micro Shards Per Node", 
            "Type": "String"
        }, 
        "VPCCIDR": {
            "AllowedPattern": "[a-zA-Z0-9]+\\..+", 
            "Default": "10.0.0.0/16", 
            "Description": "CIDR Block for the VPC you are creating.", 
            "Type": "String"
        }, 
        "VolumeSize": {
            "Default": "400", 
            "Description": "EBS Volume Size (data) to be attached to node in GBs", 
            "Type": "String"
        }, 
        "VolumeType": {
            "AllowedValues": [
                "gp2", 
                "io1"
            ], 
            "Default": "gp2", 
            "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]", 
            "Type": "String"
        }
    }, 
    "Resources": {
        "AssociateInterfaceNAT": {
            "Properties": {
                "AllocationId": {
                    "Fn::GetAtt": [
                        "NATEIP", 
                        "AllocationId"
                    ]
                }, 
                "NetworkInterfaceId": {
                    "Ref": "NATInterface"
                }
            }, 
            "Type": "AWS::EC2::EIPAssociation"
        }, 
        "AttachGateway": {
            "Properties": {
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }, 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::VPCGatewayAttachment"
        }, 
        "ConfigServer0NodeIAMProfile": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "ConfigServer0NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "ConfigServer0NodeIAMRole": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "ConfigServer0NodeInstance": {
            "Condition": "CreateMinOneShard", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": "40", 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "ConfigServer0NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "ConfigServerInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "ConfigServer0NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "ConfigServer0"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ConfigServerIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "# All is well so signal success\n", 
                                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '", 
                                {
                                    "Ref": "ConfigServer0WaitForNodeInstallWaitHandle"
                                }, 
                                "'\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "ConfigServer0NodeInterface": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "ConfigServer0NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "ConfigServer0NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "ConfigServer0WaitForNodeInstall": {
            "Condition": "CreateMinOneShard", 
            "DependsOn": "ConfigServer0NodeInstance", 
            "Properties": {
                "Handle": {
                    "Ref": "ConfigServer0WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "ConfigServer0WaitForNodeInstallWaitHandle": {
            "Condition": "CreateMinOneShard", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "ConfigServer1NodeIAMProfile": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "ConfigServer1NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "ConfigServer1NodeIAMRole": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "ConfigServer1NodeInstance": {
            "Condition": "CreateMinOneShard", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": "40", 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "ConfigServer1NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "ConfigServerInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "ConfigServer1NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "ConfigServer1"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ConfigServerIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "# All is well so signal success\n", 
                                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '", 
                                {
                                    "Ref": "ConfigServer1WaitForNodeInstallWaitHandle"
                                }, 
                                "'\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "ConfigServer1NodeInterface": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "ConfigServer1NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "ConfigServer1NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "ConfigServer1WaitForNodeInstall": {
            "Condition": "CreateMinOneShard", 
            "DependsOn": "ConfigServer1NodeInstance", 
            "Properties": {
                "Handle": {
                    "Ref": "ConfigServer1WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "ConfigServer1WaitForNodeInstallWaitHandle": {
            "Condition": "CreateMinOneShard", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "ConfigServer2NodeIAMProfile": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "ConfigServer2NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "ConfigServer2NodeIAMRole": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "ConfigServer2NodeInstance": {
            "Condition": "CreateMinOneShard", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": "40", 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "ConfigServer2NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "ConfigServerInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "ConfigServer2NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "ConfigServer2"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ConfigServerIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "##curl -OL https://s3-us-west-2.amazonaws.com/rh-public/init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "# All is well so signal success\n", 
                                "/opt/aws/bin/cfn-signal -e 0 -r \"MongoDB Config Server install success\" '", 
                                {
                                    "Ref": "ConfigServer2WaitForNodeInstallWaitHandle"
                                }, 
                                "'\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "ConfigServer2NodeInterface": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "ConfigServer2NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "ConfigServer2NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "ConfigServer2WaitForNodeInstall": {
            "Condition": "CreateMinOneShard", 
            "DependsOn": "ConfigServer2NodeInstance", 
            "Properties": {
                "Handle": {
                    "Ref": "ConfigServer2WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "ConfigServer2WaitForNodeInstallWaitHandle": {
            "Condition": "CreateMinOneShard", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "DMZRouteTable": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "NAT"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "DMZSubnet": {
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone0"
                }, 
                "CidrBlock": {
                    "Ref": "PublicSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "NAT"
                    }, 
                    {
                        "Key": "Network", 
                        "Value": "Public"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "InboundPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "false", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "100"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway"
        }, 
        "NATEIP": {
            "Properties": {
                "Domain": "vpc"
            }, 
            "Type": "AWS::EC2::EIP"
        }, 
        "NATInstance": {
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AWSNAT"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NATInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "NATInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "NAT Instance (Public Subnet)"
                    }
                ]
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "NATInterface": {
            "Properties": {
                "Description": "External interface for the NAT instance", 
                "GroupSet": [
                    {
                        "Ref": "NATSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "false", 
                "SubnetId": {
                    "Ref": "DMZSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Public"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "NATSecurityGroup": {
            "Properties": {
                "GroupDescription": "Enable internal access to the NAT device", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0",
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }, 
                        "FromPort": "8", 
                        "IpProtocol": "icmp", 
                        "ToPort": "-1"
                    }, 
                    {
                        "CidrIp": {
                            "Ref": "RemoteAccessCIDR"
                        }, 
                        "FromPort": "22", 
                        "IpProtocol": "tcp", 
                        "ToPort": "22"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "OutBoundPublicNetworkAclEntry": {
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "true", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "100"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "PrimaryInboundPublicNetworkAclEntry": {
            "DependsOn": "VPC", 
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "false", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "89"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "PrimaryNodeRoute": {
            "DependsOn": "VPC", 
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "PrimaryNodeRouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "PrimaryNodeRouteTable": {
            "DependsOn": "VPC", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "PrimaryNodeSubnet": {
            "DependsOn": "VPC", 
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone0"
                }, 
                "CidrBlock": {
                    "Ref": "PrimaryReplicaSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB"
                    }, 
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "PrimaryNodeSubnetRouteTableAssociation": {
            "DependsOn": "VPC", 
            "Properties": {
                "RouteTableId": {
                    "Ref": "PrimaryNodeRouteTable"
                }, 
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "PrimaryOutBoundPublicNetworkAclEntry": {
            "DependsOn": "VPC", 
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "true", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "88"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "PrimaryPublicNetworkAcl": {
            "DependsOn": "VPC", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Public"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        }, 
        "PrimaryReplicaNode00NodeIAMProfile": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode00NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "PrimaryReplicaNode00NodeIAMRole": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "PrimaryReplicaNode00NodeInstanceGP2": {
            "Condition": "UseGP2AndCreateMinOneShard", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode00NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode00NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode00"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode00NodeInstanceIO1": {
            "Condition": "UsePIopsAndCreateMinOneShard", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode00NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode00NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode00"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode00NodeInterface": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode00NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "PrimaryReplicaNode00NodeSecurityGroup": {
            "Condition": "CreateMinOneShard", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "PrimaryReplicaNode00WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndCreateMinOneShard", 
            "DependsOn": "PrimaryReplicaNode00NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode00WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndCreateMinOneShard", 
            "DependsOn": "PrimaryReplicaNode00NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode00WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode00WaitForNodeInstallWaitHandle": {
            "Condition": "CreateMinOneShard", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "PrimaryReplicaNode0NodeIAMProfile": {
            "Condition": "CreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode0NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "PrimaryReplicaNode0NodeIAMRole": {
            "Condition": "CreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "PrimaryReplicaNode0NodeInstanceGP2": {
            "Condition": "UseGP2AndCreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode0NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode0NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode0"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "-1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode0NodeInstanceIO1": {
            "Condition": "UsePIopsAndCreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode0NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode0NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode0"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "-1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode0NodeInterface": {
            "Condition": "CreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode0NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "PrimaryReplicaNode0NodeSecurityGroup": {
            "Condition": "CreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "PrimaryReplicaNode0WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndCreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode0WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndCreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode0WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode0WaitForNodeInstallWaitHandle": {
            "Condition": "CreateNoShard", 
            "DependsOn": "PrimaryNodeSubnet", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "PrimaryReplicaNode10NodeIAMProfile": {
            "Condition": "CreateMinTwoShards", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode10NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "PrimaryReplicaNode10NodeIAMRole": {
            "Condition": "CreateMinTwoShards", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "PrimaryReplicaNode10NodeInstanceGP2": {
            "Condition": "UseGP2AndCreateMinTwoShards", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode10NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode10NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode10"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode10NodeInstanceIO1": {
            "Condition": "UsePIopsAndCreateMinTwoShards", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode10NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode10NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode10"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode10NodeInterface": {
            "Condition": "CreateMinTwoShards", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode10NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "PrimaryReplicaNode10NodeSecurityGroup": {
            "Condition": "CreateMinTwoShards", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "PrimaryReplicaNode10WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndCreateMinTwoShards", 
            "DependsOn": "PrimaryReplicaNode10NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode10WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndCreateMinTwoShards", 
            "DependsOn": "PrimaryReplicaNode10NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode10WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode10WaitForNodeInstallWaitHandle": {
            "Condition": "CreateMinTwoShards", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "PrimaryReplicaNode20NodeIAMProfile": {
            "Condition": "CreateMinThreeShards", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "PrimaryReplicaNode20NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "PrimaryReplicaNode20NodeIAMRole": {
            "Condition": "CreateMinThreeShards", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "PrimaryReplicaNode20NodeInstanceGP2": {
            "Condition": "UseGP2AndCreateMinThreeShards", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode20NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode20NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode20"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode20NodeInstanceIO1": {
            "Condition": "UsePIopsAndCreateMinThreeShards", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "PrimaryReplicaNode20NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "PrimaryReplicaNode20NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "PrimaryReplicaNode20"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "0"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "PrimaryReplicaNode20NodeInterface": {
            "Condition": "CreateMinThreeShards", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "PrimaryReplicaNode20NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "PrimaryNodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "PrimaryReplicaNode20NodeSecurityGroup": {
            "Condition": "CreateMinThreeShards", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "PrimaryReplicaNode20WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndCreateMinThreeShards", 
            "DependsOn": "PrimaryReplicaNode20NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode20WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndCreateMinThreeShards", 
            "DependsOn": "PrimaryReplicaNode20NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "PrimaryReplicaNode20WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "PrimaryReplicaNode20WaitForNodeInstallWaitHandle": {
            "Condition": "CreateMinThreeShards", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "PublicNetworkAcl": {
            "Properties": {
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Public"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        }, 
        "PublicRoute": {
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "GatewayId": {
                    "Ref": "InternetGateway"
                }, 
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "PublicSubnetRouteTableAssociation": {
            "Properties": {
                "RouteTableId": {
                    "Ref": "DMZRouteTable"
                }, 
                "SubnetId": {
                    "Ref": "DMZSubnet"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "Secondary0InboundPublicNetworkAclEntry": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "false", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "91"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "Secondary0NodeRoute": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "Secondary0NodeRouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "Secondary0NodeRouteTable": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "Secondary0NodeSubnet": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone1"
                }, 
                "CidrBlock": {
                    "Ref": "SecondaryReplicaSubnet0"
                }, 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB"
                    }, 
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "Secondary0NodeSubnetRouteTableAssociation": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "RouteTableId": {
                    "Ref": "Secondary0NodeRouteTable"
                }, 
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "Secondary0OutBoundPublicNetworkAclEntry": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "true", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "90"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "Secondary0PublicNetworkAcl": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Public"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        }, 
        "Secondary1InboundPublicNetworkAclEntry": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "false", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "93"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "Secondary1NodeRoute": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0", 
                "InstanceId": {
                    "Ref": "NATInstance"
                }, 
                "RouteTableId": {
                    "Ref": "Secondary1NodeRouteTable"
                }
            }, 
            "Type": "AWS::EC2::Route"
        }, 
        "Secondary1NodeRouteTable": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::RouteTable"
        }, 
        "Secondary1NodeSubnet": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "AvailabilityZone": {
                    "Ref": "AvailabilityZone2"
                }, 
                "CidrBlock": {
                    "Ref": "SecondaryReplicaSubnet1"
                }, 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB"
                    }, 
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::Subnet"
        }, 
        "Secondary1NodeSubnetRouteTableAssociation": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "RouteTableId": {
                    "Ref": "Secondary1NodeRouteTable"
                }, 
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                }
            }, 
            "Type": "AWS::EC2::SubnetRouteTableAssociation"
        }, 
        "Secondary1OutBoundPublicNetworkAclEntry": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "CidrBlock": "0.0.0.0/0", 
                "Egress": "true", 
                "NetworkAclId": {
                    "Ref": "PublicNetworkAcl"
                }, 
                "PortRange": {
                    "From": "0", 
                    "To": "65535"
                }, 
                "Protocol": "6", 
                "RuleAction": "allow", 
                "RuleNumber": "92"
            }, 
            "Type": "AWS::EC2::NetworkAclEntry"
        }, 
        "Secondary1PublicNetworkAcl": {
            "Condition": "CreateThreeReplicaSet", 
            "DependsOn": "VPC", 
            "Properties": {
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Public"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::NetworkAcl"
        }, 
        "SecondaryReplicaNode00NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode00", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode00NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode00NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode00", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode00NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode00", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode00NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode00NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode00"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode00NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode00", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode00NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode00NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode00"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode00NodeInterface": {
            "Condition": "IfSecondaryReplicaNode00", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode00NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode00NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode00", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode00WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode00", 
            "DependsOn": "SecondaryReplicaNode00NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode00WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode00", 
            "DependsOn": "SecondaryReplicaNode00NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode00WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode00WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode00", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode01NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode01", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode01NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode01NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode01", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode01NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode01", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode01NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode01NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode01"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode01NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode01", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode01NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode01NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode01"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "0"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode01NodeInterface": {
            "Condition": "IfSecondaryReplicaNode01", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode01NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode01NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode01", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode01WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode01", 
            "DependsOn": "SecondaryReplicaNode01NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode01WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode01", 
            "DependsOn": "SecondaryReplicaNode01NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode01WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode01WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode01", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode0NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode0", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode0NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode0NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode0", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode0NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode0", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode0NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode0NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode0"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "-1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode0NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode0", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode0NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode0NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode0"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "-1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode0NodeInterface": {
            "Condition": "IfSecondaryReplicaNode0", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode0NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode0NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode0", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode0WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode0", 
            "DependsOn": "SecondaryReplicaNode0NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode0WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode0", 
            "DependsOn": "SecondaryReplicaNode0NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode0WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode0WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode0", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode10NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode10", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode10NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode10NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode10", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode10NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode10", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode10NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode10NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode10"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode10NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode10", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode10NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode10NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode10"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode10NodeInterface": {
            "Condition": "IfSecondaryReplicaNode10", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode10NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode10NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode10", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode10WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode10", 
            "DependsOn": "SecondaryReplicaNode10NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode10WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode10", 
            "DependsOn": "SecondaryReplicaNode10NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode10WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode10WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode10", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode11NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode11", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode11NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode11NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode11", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode11NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode11", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode11NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode11NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode11"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode11NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode11", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode11NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode11NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode11"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode11NodeInterface": {
            "Condition": "IfSecondaryReplicaNode11", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode11NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode11NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode11", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode11WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode11", 
            "DependsOn": "SecondaryReplicaNode11NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode11WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode11", 
            "DependsOn": "SecondaryReplicaNode11NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode11WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode11WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode11", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode1NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode1", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode1NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode1NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode1", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode1NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode1", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode1NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode1NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode1"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "-1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode1NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode1", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode1NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode1NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode1"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "-1"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode1NodeInterface": {
            "Condition": "IfSecondaryReplicaNode1", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode1NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode1NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode1", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode1WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode1", 
            "DependsOn": "SecondaryReplicaNode1NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode1WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode1", 
            "DependsOn": "SecondaryReplicaNode1NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode1WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode1WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode1", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode20NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode20", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode20NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode20NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode20", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode20NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode20", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode20NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode20NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode20"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode20NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode20", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode20NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode20NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode20"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "1"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode20NodeInterface": {
            "Condition": "IfSecondaryReplicaNode20", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode20NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary0NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode20NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode20", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode20WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode20", 
            "DependsOn": "SecondaryReplicaNode20NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode20WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode20", 
            "DependsOn": "SecondaryReplicaNode20NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode20WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode20WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode20", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "SecondaryReplicaNode21NodeIAMProfile": {
            "Condition": "IfSecondaryReplicaNode21", 
            "Properties": {
                "Path": "/", 
                "Roles": [
                    {
                        "Ref": "SecondaryReplicaNode21NodeIAMRole"
                    }
                ]
            }, 
            "Type": "AWS::IAM::InstanceProfile"
        }, 
        "SecondaryReplicaNode21NodeIAMRole": {
            "Condition": "IfSecondaryReplicaNode21", 
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ], 
                            "Effect": "Allow", 
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            }
                        }
                    ]
                }, 
                "Path": "/", 
                "Policies": [
                    {
                        "PolicyDocument": {
                            "Statement": [
                                {
                                    "Action": [
                                        "s3:*", 
                                        "ec2:Describe*", 
                                        "ec2:AttachNetworkInterface", 
                                        "ec2:AttachVolume", 
                                        "ec2:CreateTags", 
                                        "ec2:CreateVolume", 
                                        "ec2:RunInstances", 
                                        "ec2:StartInstances", 
                                        "ec2:DeleteVolume", 
                                        "ec2:CreateSecurityGroup", 
                                        "ec2:CreateSnapshot"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": "*"
                                }, 
                                {
                                    "Action": [
                                        "dynamodb:*", 
                                        "dynamodb:Scan", 
                                        "dynamodb:Query", 
                                        "dynamodb:GetItem", 
                                        "dynamodb:BatchGetItem", 
                                        "dynamodb:UpdateTable"
                                    ], 
                                    "Effect": "Allow", 
                                    "Resource": [
                                        "*"
                                    ]
                                }
                            ]
                        }, 
                        "PolicyName": "Backup"
                    }
                ]
            }, 
            "Type": "AWS::IAM::Role"
        }, 
        "SecondaryReplicaNode21NodeInstanceGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode21", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "gp2"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode21NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode21NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode21"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "chmod +x init.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode21NodeInstanceIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode21", 
            "Metadata": {
                "HostRole": "MongoDB Node"
            }, 
            "Properties": {
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "250", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdh", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": "200", 
                            "VolumeSize": "25", 
                            "VolumeType": "io1"
                        }
                    }, 
                    {
                        "DeviceName": "/dev/xvdf", 
                        "Ebs": {
                            "DeleteOnTermination": "true", 
                            "Iops": {
                                "Ref": "Iops"
                            }, 
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            }, 
                            "VolumeType": "io1"
                        }
                    }
                ], 
                "IamInstanceProfile": {
                    "Ref": "SecondaryReplicaNode21NodeIAMProfile"
                }, 
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap", 
                        {
                            "Ref": "AWS::Region"
                        }, 
                        "AMZNLINUX"
                    ]
                }, 
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }, 
                "KeyName": {
                    "Ref": "KeyName"
                }, 
                "NetworkInterfaces": [
                    {
                        "DeviceIndex": "0", 
                        "NetworkInterfaceId": {
                            "Ref": "SecondaryReplicaNode21NodeInterface"
                        }
                    }
                ], 
                "Tags": [
                    {
                        "Key": "Name", 
                        "Value": "SecondaryReplicaNode21"
                    }, 
                    {
                        "Key": "ClusterReplicaSetCount", 
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    }, 
                    {
                        "Key": "NodeReplicaSetIndex", 
                        "Value": "2"
                    }, 
                    {
                        "Key": "ClusterShardCount", 
                        "Value": {
                            "Ref": "ClusterShardCount"
                        }
                    }, 
                    {
                        "Key": "ShardsPerNode", 
                        "Value": {
                            "Ref": "ShardsPerNode"
                        }
                    }, 
                    {
                        "Key": "NodeShardIndex", 
                        "Value": "2"
                    }
                ], 
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "", 
                            [
                                "#!/bin/bash -v\n", 
                                "mkdir -p /home/ec2-user/mongodb \n", 
                                "cd /home/ec2-user/mongodb \n", 
                                "# Wait until the NAT initializes and Internet is available \n", 
                                "until ping -c 1 ietf.org \n", 
                                "do \n", 
                                "sleep 5; \n", 
                                "done \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/orchestrator.sh orchestrator.sh\n", 
                                "chmod +x orchestrator.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/init.sh init.sh\n", 
                                "chmod +x init.sh \n", 
                                "aws s3 cp s3://", 
                                {
                                    "Ref": "BuildBucket"
                                }, 
                                "/scripts/signalFinalStatus.sh signalFinalStatus.sh\n", 
                                "chmod +x signalFinalStatus.sh \n", 
                                "#  Run the install \n", 
                                "#  Store stack name to tag DDB name\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "_", 
                                        [
                                            "export TABLE_NAMETAG=", 
                                            {
                                                "Ref": "AWS::StackName"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export VPC=", 
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "export MongoDBVersion=", 
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "#  Store WaitHandler\n", 
                                "echo ", 
                                {
                                    "Fn::Join": [
                                        "", 
                                        [
                                            "\"", 
                                            "export WAITHANDLER='", 
                                            {
                                                "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                                            }, 
                                            "'", 
                                            "\""
                                        ]
                                    ]
                                }, 
                                " >> config.sh\n", 
                                "./init.sh > install.log 2>&1 \n", 
                                "#  Cleanup \n", 
                                "#rm -rf *\n", 
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n", 
                                "# All is well so signal success\n", 
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                }
            }, 
            "Type": "AWS::EC2::Instance"
        }, 
        "SecondaryReplicaNode21NodeInterface": {
            "Condition": "IfSecondaryReplicaNode21", 
            "Properties": {
                "Description": "Network Interface for Mongo Node", 
                "GroupSet": [
                    {
                        "Ref": "SecondaryReplicaNode21NodeSecurityGroup"
                    }
                ], 
                "SourceDestCheck": "true", 
                "SubnetId": {
                    "Ref": "Secondary1NodeSubnet"
                }, 
                "Tags": [
                    {
                        "Key": "Network", 
                        "Value": "Private"
                    }
                ]
            }, 
            "Type": "AWS::EC2::NetworkInterface"
        }, 
        "SecondaryReplicaNode21NodeSecurityGroup": {
            "Condition": "IfSecondaryReplicaNode21", 
            "Properties": {
                "GroupDescription": "Enable external access and allow communication (Trim as needed)", 
                "SecurityGroupEgress": [
                    {
                        "CidrIp": "0.0.0.0/0", 
                        "FromPort": "1", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "SecurityGroupIngress": [
                    {
                        "SourceSecurityGroupId": {
                            "Ref": "NATSecurityGroup"
                        },
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    },
                    {
                        "CidrIp": {
                            "Ref": "VPCCIDR"
                        }, 
                        "FromPort": "0", 
                        "IpProtocol": "-1", 
                        "ToPort": "65535"
                    }
                ], 
                "VpcId": {
                    "Ref": "VPC"
                }
            }, 
            "Type": "AWS::EC2::SecurityGroup"
        }, 
        "SecondaryReplicaNode21WaitForNodeInstallGP2": {
            "Condition": "UseGP2AndIfSecondaryReplicaNode21", 
            "DependsOn": "SecondaryReplicaNode21NodeInstanceGP2", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode21WaitForNodeInstallIO1": {
            "Condition": "UsePIopsAndIfSecondaryReplicaNode21", 
            "DependsOn": "SecondaryReplicaNode21NodeInstanceIO1", 
            "Properties": {
                "Handle": {
                    "Ref": "SecondaryReplicaNode21WaitForNodeInstallWaitHandle"
                }, 
                "Timeout": "3600"
            }, 
            "Type": "AWS::CloudFormation::WaitCondition"
        }, 
        "SecondaryReplicaNode21WaitForNodeInstallWaitHandle": {
            "Condition": "IfSecondaryReplicaNode21", 
            "Properties": {}, 
            "Type": "AWS::CloudFormation::WaitConditionHandle"
        }, 
        "VPC": {
            "Properties": {
                "CidrBlock": {
                    "Ref": "VPCCIDR"
                }, 
                "EnableDnsHostnames": "true", 
                "EnableDnsSupport": "true", 
                "Tags": [
                    {
                        "Key": "Application", 
                        "Value": "MongoDB on AWS"
                    }
                ]
            }, 
            "Type": "AWS::EC2::VPC"
        }
    }
}
