{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "This template is used for setting up a single mongodb node. (qs-1qtlo6bij)",
    "Parameters": {
        "VPC": {
            "Type": "AWS::EC2::VPC::Id",
            "Description": "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy MongoDB cluster."
        },
        "MongoDBServerSecurityGroupID": {
            "Description": "ID of the MongoDB Server Access Security Group (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "MongoDBServersSecurityGroupID": {
            "Description": "ID of the MongoDB Inter-Server Communication Security Group (e.g., sg-7f16e910)",
            "Type": "AWS::EC2::SecurityGroup::Id"
        },
        "MongoDBNodeIAMProfileID": {
            "Description": "ID of the MongoDB IAM Profile",
            "Type": "String"
        },
        "NodeSubnet": {
            "Description": "Subnet Id",
            "Type": "String"
        },
        "NodeInstanceType": {
            "Description": "Amazon EC2 instance type for the MongoDB nodes.",
            "Type": "String",
            "Default": "m5.large",
            "AllowedValues": [
                "m5.large",
                "m5.xlarge",
                "m5.2xlarge",
                "m5.4xlarge",
                "m5.12xlarge",
                "m5.24xlarge",
                "r5.large",
                "r5.xlarge",
                "r5.2xlarge",
                "r5.4xlarge",
                "r5.8xlarge",
                "r5.12xlarge",
                "r5.16xlarge",
                "r5.24xlarge",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge",
                "c5.18xlarge",
                "x1.16xlarge",
                "x1.32xlarge",
                "r4.large",
                "r4.xlarge",
                "r4.2xlarge",
                "r4.4xlarge",
                "r4.8xlarge",
                "r4.16xlarge",
                "i3.large",
                "i3.xlarge",
                "i3.2xlarge",
                "i3.4xlarge",
                "i3.8xlarge",
                "i3.16xlarge",
                "x1e.32xlarge",
                "x1e.16xlarge",
                "x1e.8xlarge",
                "x1e.4xlarge",
                "x1e.2xlarge",
                "x1e.xlarge",
                "m3.medium",
                "m3.large",
                "m3.xlarge",
                "m3.2xlarge",
                "m4.large",
                "m4.xlarge",
                "m4.2xlarge",
                "m4.4xlarge",
                "m4.10xlarge",
                "c3.large",
                "c3.xlarge",
                "c3.2xlarge",
                "c3.4xlarge",
                "c3.8xlarge",
                "r3.large",
                "r3.xlarge",
                "r3.2xlarge",
                "r3.4xlarge",
                "r3.8xlarge",
                "i2.xlarge",
                "i2.2xlarge",
                "i2.4xlarge",
                "i2.8xlarge",
                "t3.large",
                "t3.xlarge",
                "t3.2xlarge"

            ]
        },
        "LatestAmazonLinux2Id": {
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
        },
        "ReplicaNodeNameTag": {
            "Description": "Instance Name",
            "Type": "String"
        },
        "ReplicaNodeInitialTypeTag": {
            "Description": "Initial Node Type",
            "Type": "String"
        },
        "NodeReplicaSetIndex": {
            "Description": "Instance Index",
            "Type": "String"
        },
        "ReplicaShardIndex": {
            "Description": "Shard Index",
            "Type": "String"
        },
        "StackName": {
            "Description": "Name of the parent stack",
            "Type": "String"
        },
        "VolumeSize": {
            "Type": "String",
            "Description": "EBS Volume Size (data) to be attached to node in GBs",
            "Default": "400"
        },
        "VolumeType": {
            "Type": "String",
            "Description": "EBS Volume Type (data) to be attached to node in GBs [io1,gp2]",
            "Default": "gp2",
            "AllowedValues": [
                "gp2",
                "io1"
            ]
        },
        "Iops": {
            "Type": "String",
            "Description": "Iops of EBS volume when io1 type is chosen. Otherwise ignored",
            "Default": "100"
        },
        "KeyName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "Default": "home",
            "Description": "Name of an existing EC2 KeyPair. MongoDB instances will launch with this KeyPair."
        },
        "ClusterReplicaSetCount": {
            "Description": "Number of Replica Set Members. Choose 1 or 3",
            "Type": "String",
            "Default": "3",
            "AllowedValues": [
                "1",
                "3"
            ]
        },
        "MongoDBVersion": {
            "Description": "MongoDB version",
            "Type": "String",
            "Default": "4.2",
            "AllowedValues": [
                "4.2",
                "4.0",
                "3.6",
                "3.4"
            ]
        },
        "MongoDBAdminUsername": {
            "Default": "admin",
            "NoEcho": "true",
            "Description": "MongoDB admin account username",
            "Type": "String",
            "MinLength": "1",
            "MaxLength": "16",
            "AllowedPattern": "[a-zA-Z][a-zA-Z0-9]*",
            "ConstraintDescription": "must begin with a letter and contain only alphanumeric characters."
        },
        "MongoDBAdminPassword": {
            "AllowedPattern": "([A-Za-z0-9_@-]{8,32})",
            "ConstraintDescription": "Input your MongoDB database password, Min 8, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_@-]",
            "Description": "Enter your MongoDB Database Password, Min 8, maximum of 32 characters.",
            "NoEcho": "true",
            "Type": "String"
        },
        "ReplicaNodeWaitForNodeInstallWaitHandle": {
            "Description": "Pre-signed Wait Handle URL to send signal for associated wait condition",
            "Type": "String"
        },
        "QSS3BucketName": {
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "Default": "aws-quickstart",
            "Type": "String",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Description": "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
        },
        "QSS3KeyPrefix": {
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "Default": "quickstart-mongodb/",
            "Type": "String",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Description": "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with a hyphen (-)."
        },
        "QSS3BucketRegion": {
            "Default": "us-east-1",
            "Description": "The AWS Region where the Quick Start S3 bucket (QSS3BucketName) is hosted. When using your own bucket, you must specify this value.",
            "Type": "String"
        }
    },
    "Conditions": {
        "UsePIops": {
            "Fn::Equals": [
                {
                    "Ref": "VolumeType"
                },
                "io1"
            ]
        },
        "InstanceRecoverySupported": {
            "Fn::And": [
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i3.large"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i3.xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i3.2xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i3.4xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i3.8xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i3.16xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i2.xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i2.2xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i2.4xlarge"
                            ]
                        }
                    ]
                },
                {
                    "Fn::Not": [
                        {
                            "Fn::Equals": [
                                {
                                    "Ref": "NodeInstanceType"
                                },
                                "i2.8xlarge"
                            ]
                        }
                    ]
                }
            ]
        },
        "UsingDefaultBucket": {
            "Fn::Equals": [
            {
                "Ref": "QSS3BucketName"
            },
            "aws-quickstart"
            ]
        }
    },
    "Resources": {
        "ReplicaNodeNetworkInterface": {
            "Type": "AWS::EC2::NetworkInterface",
            "Properties": {
                "Description": "Network Interface for Mongo Node",
                "SubnetId": {
                    "Ref": "NodeSubnet"
                },
                "GroupSet": [
                    {
                        "Ref": "MongoDBServerSecurityGroupID"
                    },
                    {
                        "Ref": "MongoDBServersSecurityGroupID"
                    }
                ],
                "SourceDestCheck": true,
                "Tags": [
                    {
                        "Key": "Network",
                        "Value": "Private"
                    }
                ]
            }
        },
        "ReplicaNodeInstance": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "HostRole": "MongoDB Node",
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/mongo_pass.txt": {
                                "content": {
                                    "Ref": "MongoDBAdminPassword"
                                },
                                "mode": "000440",
                                "owner": "root",
                                "group": "root"
                            }
                        }
                    }
                }
            },
            "Properties": {
                "NetworkInterfaces": [
                    {
                        "NetworkInterfaceId": {
                            "Ref": "ReplicaNodeNetworkInterface"
                        },
                        "DeviceIndex": "0"
                    }
                ],
                "KeyName": {
                    "Ref": "KeyName"
                },
                "ImageId": {
                    "Ref": "LatestAmazonLinux2Id"
                },
                "IamInstanceProfile": {
                    "Ref": "MongoDBNodeIAMProfileID"
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Ref": "ReplicaNodeNameTag"
                        }
                    },
                    {
                        "Key": "InitialNodeType",
                        "Value": {
                            "Ref": "ReplicaNodeInitialTypeTag"
                        }
                    },
                    {
                        "Key": "ClusterReplicaSetCount",
                        "Value": {
                            "Ref": "ClusterReplicaSetCount"
                        }
                    },
                    {
                        "Key": "NodeReplicaSetIndex",
                        "Value": {
                            "Ref": "NodeReplicaSetIndex"
                        }
                    },
                    {
                        "Key": "ReplicaShardIndex",
                        "Value": {
                            "Ref": "ReplicaShardIndex"
                        }
                    }
                ],
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/xvdg",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": true,
                            "VolumeSize": 25,
                            "Iops": 250,
                            "Encrypted" : true
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdh",
                        "Ebs": {
                            "VolumeType": "io1",
                            "DeleteOnTermination": true,
                            "VolumeSize": 25,
                            "Iops": 200,
                            "Encrypted" : true
                        }
                    },
                    {
                        "DeviceName": "/dev/xvdf",
                        "Ebs": {
                            "VolumeSize": {
                                "Ref": "VolumeSize"
                            },
                            "VolumeType": {
                                "Ref": "VolumeType"
                            },
                            "Iops": {
                                "Fn::If": [
                                    "UsePIops",
                                    {
                                        "Ref": "Iops"
                                    },
                                    {
                                        "Ref": "AWS::NoValue"
                                    }
                                ]
                            },
                            "DeleteOnTermination": true,
                            "Encrypted" : true
                        }
                    }
                ],
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash\n",
                                "/opt/aws/bin/cfn-init -v --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                " --resource ReplicaNodeInstance ",
                                " --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "mkdir -p /home/ec2-user/mongodb \n",
                                "cd /home/ec2-user/mongodb \n",
                                "aws s3 cp s3://",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Fn::Sub": "${QSS3BucketName}-${AWS::Region}" }, {"Ref": "QSS3BucketName"}]
                                },
                                "/",
                                {
                                    "Ref": "QSS3KeyPrefix"
                                },
                                "scripts/orchestrator.sh orchestrator.sh ",
                                "--region ",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Ref": "AWS::Region" }, {"Ref": "QSS3BucketRegion"}]
                                },
                                "\n",
                                "chmod +x orchestrator.sh \n",
                                "aws s3 cp s3://",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Fn::Sub": "${QSS3BucketName}-${AWS::Region}" }, {"Ref": "QSS3BucketName"}]
                                },
                                "/",
                                {
                                    "Ref": "QSS3KeyPrefix"
                                },
                                "scripts/disable-transparent-hugepages /etc/init.d/disable-transparent-hugepages ",
                                "--region ",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Ref": "AWS::Region" }, {"Ref": "QSS3BucketRegion"}]
                                },
                                "\n",
                                "chmod +x /etc/init.d/disable-transparent-hugepages \n",
                                "chkconfig --add disable-transparent-hugepages \n",
                                "aws s3 cp s3://",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Fn::Sub": "${QSS3BucketName}-${AWS::Region}" }, {"Ref": "QSS3BucketName"}]
                                },
                                "/",
                                {
                                    "Ref": "QSS3KeyPrefix"
                                },
                                "scripts/init_replica.sh init.sh ",
                                "--region ",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Ref": "AWS::Region" }, {"Ref": "QSS3BucketRegion"}]
                                },
                                "\n",
                                "aws s3 cp s3://",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Fn::Sub": "${QSS3BucketName}-${AWS::Region}" }, {"Ref": "QSS3BucketName"}]
                                },
                                "/",
                                {
                                    "Ref": "QSS3KeyPrefix"
                                },
                                "scripts/signalFinalStatus.sh signalFinalStatus.sh ",
                                "--region ",
                                {
                                    "Fn::If": ["UsingDefaultBucket",  { "Ref": "AWS::Region" }, {"Ref": "QSS3BucketRegion"}]
                                },
                                "\n",
                                "chmod +x signalFinalStatus.sh \n",
                                "chmod +x init.sh \n",
                                "#  Run the install \n",
                                "#  Store stack name to tag DDB name\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "_",
                                        [
                                            "export TABLE_NAMETAG=",
                                            {
                                                "Ref": "StackName"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MongoDBVersion=",
                                            {
                                                "Ref": "MongoDBVersion"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export VPC=",
                                            {
                                                "Ref": "VPC"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "#  Store WaitHandler\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "\"",
                                            "export WAITHANDLER='",
                                            {
                                                "Ref": "ReplicaNodeWaitForNodeInstallWaitHandle"
                                            },
                                            "'",
                                            "\""
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "echo ",
                                {
                                    "Fn::Join": [
                                        "",
                                        [
                                            "export MONGODB_ADMIN_USER=",
                                            {
                                                "Ref": "MongoDBAdminUsername"
                                            }
                                        ]
                                    ]
                                },
                                " >> config.sh\n",
                                "mkdir -p /mongo_auth \n",
                                "./init.sh > install.log 2>&1 \n",
                                "#  Cleanup \n",
                                "#rm -rf *\n",
                                "chown -R ec2-user:ec2-user /home/ec2-user/ \n",
                                "/home/ec2-user/mongodb/signalFinalStatus.sh 0\n"
                            ]
                        ]
                    }
                },
                "InstanceType": {
                    "Ref": "NodeInstanceType"
                }
            }
        },
        "NodeInstanceRecoveryAlarm": {
            "Type": "AWS::CloudWatch::Alarm",
            "Condition": "InstanceRecoverySupported",
            "Properties": {
                "AlarmDescription": "EC2 Autorecovery for Node Instance. Autorecover if we fail EC2 status checks for 5 minutes.",
                "Namespace": "AWS/EC2",
                "MetricName": "StatusCheckFailed_System",
                "Statistic": "Minimum",
                "Period": 60,
                "EvaluationPeriods": 5,
                "ComparisonOperator": "GreaterThanThreshold",
                "Threshold": 0.0,
                "AlarmActions": [
                    {
                        "Fn::Join": [
                            "",
                            [
                                "arn:",
                                {
                                    "Ref": "AWS::Partition"
                                },
                                ":automate:",
                                {
                                    "Ref": "AWS::Region"
                                },
                                ":ec2:recover"
                            ]
                        ]
                    }
                ],
                "Dimensions": [
                    {
                        "Name": "InstanceId",
                        "Value": {
                            "Ref": "ReplicaNodeInstance"
                        }
                    }
                ]
            }
        }
    },
    "Outputs": {
        "NodePrivateIp": {
            "Value": {
                "Fn::GetAtt": [
                    "ReplicaNodeInstance",
                    "PrivateIp"
                ]
            },
            "Description": "Private IP Address of Node Instance"
        },
        "NodeInstanceID" : {
            "Description": "The Instance ID",
            "Value" : { "Ref": "ReplicaNodeInstance" }
        },
        "NodeNameTag": {
            "Description": "Node Name Tag",
            "Value" : { "Ref": "ReplicaNodeNameTag"}
        },
        "NodeInitialTypeTag": {
            "Description": "Initial Node Type Tag",
            "Value" : { "Ref": "ReplicaNodeInitialTypeTag"}
        }
    }
}
